{"version":3,"file":"main.js","mappings":"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":["./src/app/api-services/cities-api.service.ts","./src/app/api-services/consts.ts","./src/app/api-services/weather-api.service.ts","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/cities-page/cities-page.component.ts","./src/app/components/cities-page/cities-page.component.html","./src/app/components/city-selector/city-selector.component.ts","./src/app/components/city-selector/city-selector.component.html","./src/app/components/favorites-page/favorites-page.component.ts","./src/app/components/favorites-page/favorites-page.component.html","./src/app/components/units-selector/units-selector.component.ts","./src/app/components/units-selector/units-selector.component.html","./src/app/components/weather-card/weather-card.component.ts","./src/app/components/weather-card/weather-card.component.html","./src/app/effects/app.effects.ts","./src/app/pipes/impirial.pipe.ts","./src/app/pipes/moment.pipe.ts","./src/app/reducers/app-settings.actions.ts","./src/app/reducers/app-settings.reducer.ts","./src/app/reducers/city.actions.ts","./src/app/reducers/city.reducer.ts","./src/app/reducers/favorite.actions.ts","./src/app/reducers/favorite.reducer.ts","./src/app/reducers/index.ts","./src/app/reducers/weather.actions.ts","./src/app/reducers/weather.reducer.ts","./src/environments/environment.ts","./src/main.ts","./node_modules/moment/locale/ sync ^\\.\\/.*$"],"sourcesContent":["import { API_KEY } from './consts';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { City } from '../reducers/city.model';\nimport { map, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CitiesApiService {\n  constructor(private http: HttpClient) {}\n\n  searchCities(searchQuery: string): Observable<City[]> {\n    return this.http\n      .get<City[]>(\n        `https://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${API_KEY}&q=${searchQuery}`\n      )\n      .pipe(\n        map((results: any[]) =>\n          results.map(result => {\n            return {\n              name: result.LocalizedName,\n              id: result.Key,\n            };\n          })\n        )\n      );\n  }\n}\n","export const API_KEY = 'YwaQ5spXthCAbfnd8RpToPB5w7n8NpuZ';\n","import { Guid } from 'guid-typescript';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, forkJoin } from 'rxjs';\nimport { Weather } from '../reducers/weather.model';\nimport { map } from 'rxjs/operators';\nimport * as moment from 'moment';\nimport { API_KEY } from './consts';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WeatherApiService {\n  constructor(private http: HttpClient) {}\n\n  getCurrentWeather(cityId: string): Observable<Weather> {\n    return this.http\n      .get<any>(\n        `https://dataservice.accuweather.com/currentconditions/v1/${cityId}?apikey=${API_KEY}`\n      )\n      .pipe(\n        map(apiResult => {\n          const weatherResult = apiResult[0];\n          if (weatherResult) {\n            return {\n              id: Guid.create().toString(),\n              cityId,\n              date: moment().toISOString(),\n              text: weatherResult.WeatherText,\n              temperature: {\n                impirialValue: weatherResult.Temperature.Imperial.Value,\n                impirialUnit: weatherResult.Temperature.Imperial.Unit,\n                metricValue: weatherResult.Temperature.Metric.Value,\n                metricUnit: weatherResult.Temperature.Metric.Unit,\n              },\n            } as Weather;\n          }\n          return null;\n        })\n      );\n  }\n\n  getCurrentWeatherForMultipleCities(cityIds: string[]): Observable<Weather[]> {\n    return forkJoin(cityIds.map(cityId => this.getCurrentWeather(cityId)));\n  }\n\n  getWeatherForecast(cityId: string): Observable<Weather[]> {\n    return this.http\n      .get<any>(\n        `https://dataservice.accuweather.com/forecasts/v1/daily/5day/${cityId}?apikey=${API_KEY}&metric=true`\n      )\n      .pipe(\n        map(result =>\n          result.DailyForecasts.map(forecast => {\n            return {\n              id: Guid.create().toString(),\n              cityId,\n              text: forecast.Day.IconPhrase,\n              date: forecast.Date,\n              isForecast: true,\n              temperature: {\n                minMetricValue: forecast.Temperature.Minimum.Value,\n                maxMetricValue: forecast.Temperature.Maximum.Value,\n              },\n            } as Weather;\n          })\n        )\n      );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { CitiesPageComponent } from './components/cities-page/cities-page.component';\nimport { FavoritesPageComponent } from './components/favorites-page/favorites-page.component';\n\nconst routes: Routes = [\n  { path: '', component: CitiesPageComponent },\n  { path: 'favorites', component: FavoritesPageComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { relativeLinkResolution: 'legacy' })],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { Component } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Router } from '@angular/router';\nimport { Favorite } from './reducers/favorite.model';\nimport { LoadFavoritesFromLocalStorage } from './reducers/favorite.actions';\nimport { AddCity, SelectCity } from './reducers/city.actions';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  constructor(private router: Router, private favoriteStore: Store<Favorite>) {\n    this.favoriteStore.dispatch(new LoadFavoritesFromLocalStorage());\n    this.favoriteStore.dispatch(\n      new AddCity({\n        city: {\n          id: '215854',\n          name: 'Tel Aviv',\n        },\n      })\n    );\n    this.favoriteStore.dispatch(new SelectCity({ cityId: '215854' }));\n  }\n\n  onCitiesWeatherClicked() {\n    this.router.navigateByUrl('/');\n  }\n\n  onFavoritesClicked() {\n    this.router.navigateByUrl('/favorites');\n  }\n}\n","<mat-toolbar>\n  <mat-icon>\n    ac_unit\n  </mat-icon>\n  <span>Every Weather</span>\n  <span class=\"spacer\"></span>\n  <app-units-selector></app-units-selector>\n  <button mat-icon-button [matMenuTriggerFor]=\"appMenu\">\n    <mat-icon>\n      menu\n    </mat-icon>\n  </button>\n  <mat-menu #appMenu=\"matMenu\">\n    <button (click)=\"onCitiesWeatherClicked()\" mat-menu-item>\n      Cities Weather\n    </button>\n    <button (click)=\"onFavoritesClicked()\" mat-menu-item>\n      Favorites\n    </button>\n  </mat-menu>\n</mat-toolbar>\n<div class=\"outlet-container\">\n  <router-outlet></router-outlet>\n</div>\n","import { environment } from './../environments/environment';\nimport { AppEffects } from './effects/app.effects';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { StoreModule } from '@ngrx/store';\nimport { reducers, metaReducers } from './reducers';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { CityselectorComponent } from './components/city-selector/city-selector.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { EffectsModule } from '@ngrx/effects';\nimport { HttpClientModule } from '@angular/common/http';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { WeatherCardComponent } from './components/weather-card/weather-card.component';\nimport { MomentModule } from 'ngx-moment';\nimport { MomentPipe } from './pipes/moment.pipe';\nimport { CitiesPageComponent } from './components/cities-page/cities-page.component';\nimport { FavoritesPageComponent } from './components/favorites-page/favorites-page.component';\nimport { UnitsSelectorComponent } from './components/units-selector/units-selector.component';\nimport { ImpirialPipe } from './pipes/impirial.pipe';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CityselectorComponent,\n    WeatherCardComponent,\n    MomentPipe,\n    CitiesPageComponent,\n    FavoritesPageComponent,\n    UnitsSelectorComponent,\n    ImpirialPipe,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatToolbarModule,\n    MatAutocompleteModule,\n    MatRadioModule,\n    MatIconModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatTooltipModule,\n    MatInputModule,\n    MatMenuModule,\n    HttpClientModule,\n    MatButtonModule,\n    MatCardModule,\n    MomentModule,\n    StoreModule.forRoot(reducers, {\n      metaReducers,\n      runtimeChecks: {\n        strictStateImmutability: true,\n        strictActionImmutability: true,\n      },\n    }),\n    EffectsModule.forRoot([AppEffects]),\n    StoreDevtoolsModule.instrument({\n      maxAge: 25, // Retains last 25 states\n      logOnly: environment.production, // Restrict extension to log-only mode\n    }),\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { isSelectedCityInFavorites, isImpirial } from './../../reducers/index';\nimport {\n  AddSelectedCityToFavorites,\n  RemoveSelectedCityFromFavorites,\n} from './../../reducers/favorite.actions';\nimport { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { City } from '../../reducers/city.model';\nimport { Weather } from '../../reducers/weather.model';\nimport { Store, select } from '@ngrx/store';\nimport {\n  getCurrentCity,\n  getSelectedCityWeather,\n  getSelectedCityWeatherForcasts,\n} from '../../reducers';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { AppSettings } from 'src/app/reducers/app-settings.model';\nimport { ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'app-cities-page',\n  templateUrl: './cities-page.component.html',\n  styleUrls: ['./cities-page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CitiesPageComponent implements OnInit {\n  selectedCity$: Observable<City>;\n  isSelectedCityInFavorites$: Observable<boolean>;\n  currentWeather$: Observable<Weather>;\n  weatherForecasts$: Observable<Weather[]>;\n  isImpirial$: Observable<boolean>;\n  title = 'every-weather';\n\n  constructor(\n    private cityStore: Store<City>,\n    private weatherStore: Store<Weather>,\n    private appSettingsStore: Store<AppSettings>\n  ) {}\n\n  ngOnInit() {\n    this.isImpirial$ = this.appSettingsStore.pipe(select(isImpirial));\n    this.selectedCity$ = this.cityStore.pipe(select(getCurrentCity));\n    this.isSelectedCityInFavorites$ = this.cityStore.pipe(\n      select(isSelectedCityInFavorites),\n      distinctUntilChanged()\n    );\n    this.currentWeather$ = this.weatherStore.pipe(\n      select(getSelectedCityWeather)\n    );\n    this.weatherForecasts$ = this.weatherStore.pipe(\n      select(getSelectedCityWeatherForcasts)\n    );\n  }\n\n  onAddToFavoritesClicked() {\n    this.cityStore.dispatch(new AddSelectedCityToFavorites());\n  }\n\n  onRemoveFromFavoritesClicked() {\n    this.cityStore.dispatch(new RemoveSelectedCityFromFavorites());\n  }\n}\n","<div class=\"row center-sm middle-sm cities-search-container\">\n  <div class=\"col-sm-12 col-md-8 col-xs-12\">\n    <app-city-selector></app-city-selector>\n    <button\n      matTooltip=\"Remove from favorites\"\n      *ngIf=\"(isSelectedCityInFavorites$ | async) === true\"\n      (click)=\"onRemoveFromFavoritesClicked()\"\n      class=\"add-to-favorites-button\"\n      mat-raised-button\n      color=\"primary\"\n      [disabled]=\"!(selectedCity$ | async)\"\n    >\n      <mat-icon class=\"favorite-icon strike-center\">\n        favorite\n      </mat-icon>\n    </button>\n    <button\n      matTooltip=\"Add to favorites\"\n      *ngIf=\"(isSelectedCityInFavorites$ | async) === false\"\n      (click)=\"onAddToFavoritesClicked()\"\n      class=\"add-to-favorites-button\"\n      mat-raised-button\n      color=\"primary\"\n      [disabled]=\"!(selectedCity$ | async)\"\n    >\n      <mat-icon>\n        favorite\n      </mat-icon>\n    </button>\n  </div>\n</div>\n<div class=\"weather-container\" *ngIf=\"selectedCity$ | async as selectedCity\">\n  <h3>Current:</h3>\n  <div class=\"row\">\n    <div class=\"col-sm-4\">\n      <app-weather-card\n        [cityName]=\"selectedCity.name\"\n        [weather]=\"currentWeather$ | async\"\n        [isImpirial]=\"isImpirial$ | async\"\n      ></app-weather-card>\n    </div>\n  </div>\n  <h3>Next 5 days:</h3>\n  <div class=\"row\">\n    <div\n      class=\"col forecast-card\"\n      *ngFor=\"let weather of weatherForecasts$ | async\"\n    >\n      <app-weather-card\n        [cityName]=\"selectedCity.name\"\n        [weather]=\"weather\"\n        [isImpirial]=\"isImpirial$ | async\"\n      ></app-weather-card>\n    </div>\n  </div>\n</div>\n","import {\n  SearchCities,\n  SelectCity,\n  ClearSelectedCity,\n} from '../../reducers/city.actions';\nimport {\n  Component,\n  OnInit,\n  ViewChild,\n  ElementRef,\n  AfterViewInit,\n  OnDestroy,\n} from '@angular/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport { debounceTime, map } from 'rxjs/operators';\nimport { UntypedFormControl } from '@angular/forms';\nimport { Store, select } from '@ngrx/store';\nimport { City } from '../../reducers/city.model';\nimport { selectCities, getCurrentCity, queryCities } from '../../reducers';\nimport { MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';\nimport { SubSink } from 'SubSink';\nimport { ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'app-city-selector',\n  templateUrl: './city-selector.component.html',\n  styleUrls: ['./city-selector.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CityselectorComponent implements OnInit, AfterViewInit, OnDestroy {\n  @ViewChild('autoCompleteInput')\n  autoCompleteInput: ElementRef;\n  cityInput: UntypedFormControl = new UntypedFormControl();\n  cities$: Observable<City[]>;\n  currentCity$: Observable<City>;\n  private subs = new SubSink();\n\n  constructor(private cityStore: Store<City>) {}\n\n  ngOnInit() {\n    this.cities$ = this.cityStore.pipe(select(selectCities));\n    this.subs.add(\n      this.cityStore.pipe(select(getCurrentCity)).subscribe(city => {\n        if (city) {\n          this.cityInput.setValue(city.name);\n        }\n      })\n    );\n  }\n\n  ngAfterViewInit(): void {\n    fromEvent(this.autoCompleteInput.nativeElement, 'keyup')\n      .pipe(debounceTime(300))\n      .subscribe((event: KeyboardEvent) => {\n        if (this.cityInput.value) {\n          this.subs.add(\n            // select cities from the store first to allow caching. if not found api endpoint will be used instead.\n            this.cityStore\n              .select(queryCities)\n              .pipe(map(selector => selector(this.cityInput.value)))\n              .subscribe(cities => {\n                if (cities.length > 0) {\n                  this.cities$ = of(cities);\n                } else {\n                  this.cityStore.dispatch(\n                    new SearchCities({\n                      query: this.cityInput.value,\n                    })\n                  );\n                }\n              })\n          );\n        } else {\n          this.cityStore.dispatch(new ClearSelectedCity());\n        }\n      });\n  }\n\n  onOptionSelected(event: MatAutocompleteSelectedEvent) {\n    if (event.option.value && event.option.value.id) {\n      this.cityStore.dispatch(\n        new SelectCity({ cityId: event.option.value.id })\n      );\n      this.cityInput.setValue(event.option.value.name);\n    } else {\n      this.cityStore.dispatch(new ClearSelectedCity());\n    }\n  }\n\n  trackByCity(value: City, index: number) {\n    return value.id;\n  }\n\n  ngOnDestroy() {\n    this.subs.unsubscribe();\n  }\n}\n","<mat-form-field class=\"city-selector\">\n  <input\n    #autoCompleteInput\n    type=\"text\"\n    matInput\n    [formControl]=\"cityInput\"\n    [matAutocomplete]=\"auto\"\n    name=\"countryInput\"\n    placeholder=\"search cities\"\n    [matAutocomplete]=\"auto\"\n  />\n  <mat-icon matSuffix>\n    search\n  </mat-icon>\n  <mat-autocomplete\n    #auto=\"matAutocomplete\"\n    (optionSelected)=\"onOptionSelected($event)\"\n  >\n    <mat-option\n      *ngFor=\"let city of cities$ | async; trackBy: trackByCity\"\n      [value]=\"city\"\n    >\n      {{ city.name }}\n    </mat-option>\n  </mat-autocomplete>\n</mat-form-field>\n","import { AddCity } from './../../reducers/city.actions';\nimport {\n  selectFavorites,\n  getWeatherByCityId,\n  isImpirial,\n} from './../../reducers/index';\nimport {\n  LoadFavoritesPage,\n  LoadFavoritesFromLocalStorage,\n} from './../../reducers/favorite.actions';\nimport { Weather } from './../../reducers/weather.model';\nimport { Observable } from 'rxjs';\nimport { Favorite } from './../../reducers/favorite.model';\nimport { Component, OnInit } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport { SelectCity } from 'src/app/reducers/city.actions';\nimport { Router } from '@angular/router';\nimport { AppSettings } from 'src/app/reducers/app-settings.model';\nimport { ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'app-favorites-page',\n  templateUrl: './favorites-page.component.html',\n  styleUrls: ['./favorites-page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FavoritesPageComponent implements OnInit {\n  favorites$: Observable<Favorite[]>;\n  isImpirial$: Observable<boolean>;\n  constructor(\n    private favoriteStore: Store<Favorite>,\n    private weatherStore: Store<Weather>,\n    private appSettingsStore: Store<AppSettings>,\n    private router: Router\n  ) {}\n\n  ngOnInit() {\n    this.isImpirial$ = this.appSettingsStore.pipe(select(isImpirial));\n    this.favoriteStore.dispatch(new LoadFavoritesPage());\n    this.favorites$ = this.favoriteStore.pipe(select(selectFavorites));\n  }\n\n  getWeatherByCityId(cityId: string) {\n    return this.weatherStore.pipe(select(getWeatherByCityId, { cityId }));\n  }\n\n  onWeatherCardClicked(favorite: Favorite) {\n    this.favoriteStore.dispatch(\n      new AddCity({\n        city: {\n          id: favorite.id,\n          name: favorite.cityName,\n        },\n      })\n    );\n    this.favoriteStore.dispatch(new SelectCity({ cityId: favorite.id }));\n    this.router.navigateByUrl('/');\n  }\n}\n","<h2>Favorites:</h2>\n<div class=\"row\">\n  <div class=\"col\" *ngFor=\"let favorite of favorites$ | async\">\n    <app-weather-card\n      clickable=\"true\"\n      (cardClick)=\"onWeatherCardClicked(favorite)\"\n      [cityName]=\"favorite.cityName\"\n      [weather]=\"getWeatherByCityId(favorite.id) | async\"\n      [isImpirial]=\"isImpirial$ | async\"\n    ></app-weather-card>\n  </div>\n</div>\n","import { SetDegreesUnit } from './../../reducers/app-settings.actions';\nimport { selectAppSettings } from './../../reducers/index';\nimport { Observable } from 'rxjs';\nimport { Component, OnInit } from '@angular/core';\nimport { AppSettings } from 'src/app/reducers/app-settings.model';\nimport { Store, select } from '@ngrx/store';\nimport { MatRadioChange } from '@angular/material/radio';\n\n@Component({\n  selector: 'app-units-selector',\n  templateUrl: './units-selector.component.html',\n  styleUrls: ['./units-selector.component.scss'],\n})\nexport class UnitsSelectorComponent implements OnInit {\n  appSettings$: Observable<AppSettings>;\n  constructor(private appSettingsStore: Store<AppSettings>) {}\n\n  ngOnInit() {\n    this.appSettings$ = this.appSettingsStore.pipe(select(selectAppSettings));\n  }\n\n  onSelectionChanged(changeEvent: MatRadioChange) {\n    this.appSettingsStore.dispatch(\n      new SetDegreesUnit({ unit: changeEvent.value })\n    );\n  }\n}\n","<mat-radio-group\n  aria-label=\"Select an option\"\n  [value]=\"(appSettings$ | async).degreesUnit\"\n  (change)=\"onSelectionChanged($event)\"\n>\n  <mat-radio-button value=\"METRIC\">Metric</mat-radio-button>\n  <mat-radio-button value=\"IMPIRIAL\">Impirial</mat-radio-button>\n</mat-radio-group>\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { Weather } from '../../reducers/weather.model';\nimport { City } from '../../reducers/city.model';\nimport { ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'app-weather-card',\n  templateUrl: './weather-card.component.html',\n  styleUrls: ['./weather-card.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WeatherCardComponent implements OnInit {\n  @Input() weather: Weather;\n  @Input() cityName: string;\n  @Input() clickable = false;\n  @Input() isImpirial = false;\n  @Output() cardClick = new EventEmitter<Weather>();\n  constructor() {}\n\n  ngOnInit() {}\n\n  onWeatherCardClicked() {\n    this.cardClick.emit(this.weather);\n  }\n\n  get degreesUnit(): string {\n    return this.isImpirial ? 'F' : 'C';\n  }\n}\n","<mat-card\n  class=\"card\"\n  [ngClass]=\"{ clickable: clickable }\"\n  *ngIf=\"weather\"\n  (click)=\"onWeatherCardClicked()\"\n>\n  <mat-card-title *ngIf=\"!weather.isForecast\">\n    Current Weather in {{ cityName }}\n  </mat-card-title>\n  <mat-card-title *ngIf=\"weather.isForecast\">\n    {{ weather.date | moment: 'dddd' }}\n  </mat-card-title>\n  <mat-card-content>\n    <div class=\"row\">\n      <div class=\"col-sm-12 col-xs-6 col-md-6\" *ngIf=\"weather.date\">\n        {{ weather.text }}\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-sm-6 col-xs-6 col-md-6\">\n        Temperature\n      </div>\n      <div\n        class=\"col-sm-6 col-xs-6 col-md-6 text-end\"\n        *ngIf=\"!weather.isForecast\"\n      >\n        {{ weather.temperature.metricValue | impirial: isImpirial }}\n        {{ degreesUnit }}\n      </div>\n      <div\n        class=\"col-sm-6 col-xs-6 col-md-6 text-end\"\n        *ngIf=\"weather.isForecast\"\n      >\n        {{ weather.temperature.minMetricValue | impirial: isImpirial }}\n        {{ degreesUnit }} -\n        {{ weather.temperature.maxMetricValue | impirial: isImpirial }}\n        {{ degreesUnit }}\n      </div>\n    </div>\n  </mat-card-content>\n</mat-card>\n","import {\n  FavoriteActionTypes,\n  LoadFavorites,\n  SaveFavoritesToLocalStorage,\n  AddFavorite,\n  DeleteFavorite,\n} from './../reducers/favorite.actions';\nimport { WeatherApiService } from './../api-services/weather-api.service';\nimport {\n  WeatherActionTypes,\n  GetCityCurrentWeather,\n  LoadWeathers,\n  AddWeathers,\n  GetCityWeatherForecast,\n  ClearWeathers,\n} from './../reducers/weather.actions';\nimport { CitiesApiService } from '../api-services/cities-api.service';\nimport {\n  CityActionTypes,\n  SearchCities,\n  LoadCities,\n  SelectCity,\n} from './../reducers/city.actions';\nimport { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { mergeMap, map, withLatestFrom } from 'rxjs/operators';\nimport { Store, select } from '@ngrx/store';\nimport { City } from '../reducers/city.model';\nimport {\n  selectFavorites,\n  getCurrentCity,\n  selectFavoriteIds,\n  selectCurrentCityId,\n} from '../reducers';\nimport { Favorite } from '../reducers/favorite.model';\n\n@Injectable()\nexport class AppEffects {\n  // Search cities using the api and load them to the store\n  searchCities$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(CityActionTypes.SearchCities),\n      mergeMap((action: SearchCities) =>\n        this.citiesApiService\n          .searchCities(action.payload.query)\n          .pipe(map(cities => new LoadCities({ cities })))\n      )\n    )\n  );\n\n  // gets the weather for the selected city from the api and loads it to the store\n  getCityCurrentWeather$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(WeatherActionTypes.GetCityCurrentWeather),\n      mergeMap((action: GetCityCurrentWeather) =>\n        this.weatherApiService\n          .getCurrentWeather(action.payload.cityId)\n          .pipe(map(weather => new LoadWeathers({ weathers: [weather] })))\n      )\n    )\n  );\n\n  // gets the forecastes for a city from the api and add them to the store\n  getCityWeatherForcast$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(WeatherActionTypes.GetCityWeatherForecast),\n      mergeMap((action: GetCityWeatherForecast) =>\n        this.weatherApiService\n          .getWeatherForecast(action.payload.cityId)\n          .pipe(map(weathers => new AddWeathers({ weathers })))\n      )\n    )\n  );\n\n  // when city is selected get new weather data for that city from the api and load to it the the store\n  citySelected$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(CityActionTypes.SelectCity),\n      mergeMap((action: SelectCity) => [\n        new ClearWeathers(),\n        new GetCityCurrentWeather({ cityId: action.payload.cityId }),\n        new GetCityWeatherForecast(action.payload),\n      ])\n    )\n  );\n\n  // saves favorites cities from the store to local storage\n\n  saveFavoritesToLocalStorage$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(FavoriteActionTypes.SaveFavoritesToLocalStorage),\n        withLatestFrom(this.cityStore.pipe(select(selectFavorites))),\n        map(([, favorites]) =>\n          window.localStorage.setItem('favorites', JSON.stringify(favorites))\n        )\n      ),\n    { dispatch: false }\n  );\n\n  // load favorites from local storage and load them to the store\n\n  loadFavoritesFromLocalStorage$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(FavoriteActionTypes.LoadFavoritesFromLocalStorage),\n      map(() => {\n        const favorites: Favorite[] = JSON.parse(\n          window.localStorage.getItem('favorites')\n        );\n        if (favorites && favorites.length > 0) {\n          return new LoadFavorites({ favorites });\n        }\n        return new LoadFavorites({ favorites: [] });\n      })\n    )\n  );\n\n  // when a favorite is added to the store save the favorites to local storage\n\n  addToFavorites$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(FavoriteActionTypes.AddFavorite),\n      mergeMap(() => [new SaveFavoritesToLocalStorage()])\n    )\n  );\n\n  // add the selected city to the favorites store\n\n  addSelectedCityToFavorites$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(FavoriteActionTypes.AddSelectedCityToFavorites),\n      withLatestFrom(this.cityStore.pipe(select(getCurrentCity))),\n      map(\n        ([, selectedCity]) =>\n          new AddFavorite({\n            favorite: {\n              id: selectedCity.id,\n              cityName: selectedCity.name,\n            },\n          })\n      )\n    )\n  );\n\n  // loads the favorites page data from the api\n\n  loadFavoritesPage$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(FavoriteActionTypes.LoadFavoritesPage),\n      withLatestFrom(this.favoriteStore.pipe(select(selectFavoriteIds))),\n      mergeMap(([, ids]) =>\n        this.weatherApiService\n          .getCurrentWeatherForMultipleCities(ids as string[])\n          .pipe(map(weathers => new LoadWeathers({ weathers })))\n      )\n    )\n  );\n\n  // remove the selected city from the store\n\n  removeSelectedCityFromFavorites$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(FavoriteActionTypes.RemoveSelectedCityFromFavorites),\n      withLatestFrom(this.cityStore.pipe(select(selectCurrentCityId))),\n      map(([, selectedCityId]) => new DeleteFavorite({ id: selectedCityId }))\n    )\n  );\n\n  // when a favorite is removed save the favorites to local storage\n\n  deleteFavorite$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(FavoriteActionTypes.DeleteFavorite),\n      mergeMap(() => [new SaveFavoritesToLocalStorage()])\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private citiesApiService: CitiesApiService,\n    private weatherApiService: WeatherApiService,\n    private cityStore: Store<City>,\n    private favoriteStore: Store<Favorite>\n  ) {}\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'impirial',\n})\nexport class ImpirialPipe implements PipeTransform {\n  transform(value: number, active: boolean): string {\n    if (active) {\n      return Math.floor((value * 9) / 5 + 32) + '\\u00B0';\n    }\n    return Math.floor(value) + '\\u00B0';\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport * as moment from 'moment';\n\n@Pipe({\n  name: 'moment',\n  pure: false,\n})\nexport class MomentPipe implements PipeTransform {\n  transform(date: string, format: string = 'YYYY-MM-DD HH:mm:ss'): string {\n    return moment(date).format(format);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { AppSettings } from './app-settings.model';\n\nexport enum AppSettingsActionTypes {\n  LoadAppSettings = '[AppSettings] Load AppSettings',\n  SaveAppSettingsToLocalStorage = '[AppSettings] Save To Local Storage',\n  LoadAppSettingsFromLocalStorage = '[AppSettings] Load From Local Storage',\n  SetDegreesUnit = '[AppSettings] Set Degrees Unit',\n}\n\nexport class LoadAppSettingss implements Action {\n  readonly type = AppSettingsActionTypes.LoadAppSettings;\n\n  constructor(public payload: { settings: AppSettings }) {}\n}\n\nexport class SaveAppSettingsToLocalStorage implements Action {\n  readonly type = AppSettingsActionTypes.SaveAppSettingsToLocalStorage;\n}\n\nexport class LoadAppSettingsFromLocalStorage implements Action {\n  readonly type = AppSettingsActionTypes.LoadAppSettingsFromLocalStorage;\n}\n\nexport class SetDegreesUnit implements Action {\n  readonly type = AppSettingsActionTypes.SetDegreesUnit;\n\n  constructor(public payload: { unit: 'METRIC' | 'IMPIRIAL' }) {}\n}\n\nexport type AppSettingsActions =\n  | LoadAppSettingss\n  | SaveAppSettingsToLocalStorage\n  | LoadAppSettingsFromLocalStorage\n  | SetDegreesUnit;\n","import {\n  AppSettingsActions,\n  AppSettingsActionTypes,\n} from './app-settings.actions';\nimport { AppSettings } from './app-settings.model';\n\nexport const appSettingsFeatureKey = 'appSettings';\n\nexport interface State extends AppSettings {}\n\nexport const initialState: State = {\n  degreesUnit: 'METRIC',\n};\n\nexport function reducer(\n  state = initialState,\n  action: AppSettingsActions\n): State {\n  switch (action.type) {\n    case AppSettingsActionTypes.LoadAppSettings: {\n      return {\n        ...state,\n        degreesUnit: action.payload.settings.degreesUnit,\n      };\n    }\n\n    case AppSettingsActionTypes.SetDegreesUnit: {\n      return {\n        ...state,\n        degreesUnit: action.payload.unit,\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { Update } from '@ngrx/entity';\nimport { City } from './city.model';\n\nexport enum CityActionTypes {\n  LoadCities = '[City] Load Cities',\n  AddCity = '[City] Add City',\n  UpsertCity = '[City] Upsert City',\n  AddCities = '[City] Add Cities',\n  UpsertCities = '[City] Upsert Cities',\n  UpdateCity = '[City] Update City',\n  UpdateCities = '[City] Update Cities',\n  DeleteCity = '[City] Delete City',\n  DeleteCities = '[City] Delete Cities',\n  ClearCities = '[City] Clear Cities',\n  SearchCities = '[City] Search Cities',\n  SelectCity = '[City] Select City',\n  ClearSelectedCity = '[City] Clear Selected City',\n}\n\nexport class LoadCities implements Action {\n  readonly type = CityActionTypes.LoadCities;\n\n  constructor(public payload: { cities: City[] }) {}\n}\n\nexport class AddCity implements Action {\n  readonly type = CityActionTypes.AddCity;\n\n  constructor(public payload: { city: City }) {}\n}\n\nexport class UpsertCity implements Action {\n  readonly type = CityActionTypes.UpsertCity;\n\n  constructor(public payload: { city: City }) {}\n}\n\nexport class AddCities implements Action {\n  readonly type = CityActionTypes.AddCities;\n\n  constructor(public payload: { cities: City[] }) {}\n}\n\nexport class UpsertCities implements Action {\n  readonly type = CityActionTypes.UpsertCities;\n\n  constructor(public payload: { cities: City[] }) {}\n}\n\nexport class UpdateCity implements Action {\n  readonly type = CityActionTypes.UpdateCity;\n\n  constructor(public payload: { city: Update<City> }) {}\n}\n\nexport class UpdateCities implements Action {\n  readonly type = CityActionTypes.UpdateCities;\n\n  constructor(public payload: { cities: Update<City>[] }) {}\n}\n\nexport class DeleteCity implements Action {\n  readonly type = CityActionTypes.DeleteCity;\n\n  constructor(public payload: { id: string }) {}\n}\n\nexport class DeleteCities implements Action {\n  readonly type = CityActionTypes.DeleteCities;\n\n  constructor(public payload: { ids: string[] }) {}\n}\n\nexport class ClearCities implements Action {\n  readonly type = CityActionTypes.ClearCities;\n}\n\nexport class SearchCities implements Action {\n  readonly type = CityActionTypes.SearchCities;\n\n  constructor(public payload: { query: string }) {}\n}\n\nexport class SelectCity implements Action {\n  readonly type = CityActionTypes.SelectCity;\n\n  constructor(public payload: { cityId: string }) {}\n}\n\nexport class ClearSelectedCity implements Action {\n  readonly type = CityActionTypes.ClearSelectedCity;\n}\n\nexport type CityActions =\n  | LoadCities\n  | AddCity\n  | UpsertCity\n  | AddCities\n  | UpsertCities\n  | UpdateCity\n  | UpdateCities\n  | DeleteCity\n  | DeleteCities\n  | ClearCities\n  | SearchCities\n  | SelectCity\n  | ClearSelectedCity;\n","import { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { City } from './city.model';\nimport { CityActions, CityActionTypes } from './city.actions';\n\nexport const citiesFeatureKey = 'cities';\n\nexport interface State extends EntityState<City> {\n  selectedCityId: string;\n}\n\nexport const adapter: EntityAdapter<City> = createEntityAdapter<City>();\n\nexport const initialState: State = adapter.getInitialState({\n  selectedCityId: null,\n});\n\nexport function reducer(state = initialState, action: CityActions): State {\n  switch (action.type) {\n    case CityActionTypes.AddCity: {\n      return adapter.addOne(action.payload.city, state);\n    }\n\n    case CityActionTypes.UpsertCity: {\n      return adapter.upsertOne(action.payload.city, state);\n    }\n\n    case CityActionTypes.AddCities: {\n      return adapter.addMany(action.payload.cities, state);\n    }\n\n    case CityActionTypes.UpsertCities: {\n      return adapter.upsertMany(action.payload.cities, state);\n    }\n\n    case CityActionTypes.UpdateCity: {\n      return adapter.updateOne(action.payload.city, state);\n    }\n\n    case CityActionTypes.UpdateCities: {\n      return adapter.updateMany(action.payload.cities, state);\n    }\n\n    case CityActionTypes.DeleteCity: {\n      return adapter.removeOne(action.payload.id, state);\n    }\n\n    case CityActionTypes.DeleteCities: {\n      return adapter.removeMany(action.payload.ids, state);\n    }\n\n    case CityActionTypes.LoadCities: {\n      return adapter.addMany(action.payload.cities, state);\n    }\n\n    case CityActionTypes.ClearCities: {\n      return adapter.removeAll(state);\n    }\n\n    case CityActionTypes.SelectCity: {\n      return { ...state, selectedCityId: action.payload.cityId };\n    }\n\n    case CityActionTypes.ClearSelectedCity: {\n      return { ...state, selectedCityId: null };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n\nexport const {\n  selectIds,\n  selectEntities,\n  selectAll,\n  selectTotal,\n} = adapter.getSelectors();\n\nexport const getSelectedCityId = (state: State) => state.selectedCityId;\n","import { Action } from '@ngrx/store';\nimport { Update } from '@ngrx/entity';\nimport { Favorite } from './favorite.model';\n\nexport enum FavoriteActionTypes {\n  LoadFavorites = '[Favorite] Load Favorites',\n  AddFavorite = '[Favorite] Add Favorite',\n  UpsertFavorite = '[Favorite] Upsert Favorite',\n  AddFavorites = '[Favorite] Add Favorites',\n  UpsertFavorites = '[Favorite] Upsert Favorites',\n  UpdateFavorite = '[Favorite] Update Favorite',\n  UpdateFavorites = '[Favorite] Update Favorites',\n  DeleteFavorite = '[Favorite] Delete Favorite',\n  DeleteFavorites = '[Favorite] Delete Favorites',\n  ClearFavorites = '[Favorite] Clear Favorites',\n  SaveFavoritesToLocalStorage = '[Favorite] Save Favorites To Local Storage',\n  LoadFavoritesFromLocalStorage = '[Favorite] Load Favorites From Local Storage',\n  AddSelectedCityToFavorites = '[Favorite] Add Selected City To Favorites',\n  RemoveSelectedCityFromFavorites = '[Favorite] Remove Selected City From Favorites',\n  LoadFavoritesPage = '[Favorite] Load Favorites Page',\n}\n\nexport class LoadFavorites implements Action {\n  readonly type = FavoriteActionTypes.LoadFavorites;\n\n  constructor(public payload: { favorites: Favorite[] }) {}\n}\n\nexport class AddFavorite implements Action {\n  readonly type = FavoriteActionTypes.AddFavorite;\n\n  constructor(public payload: { favorite: Favorite }) {}\n}\n\nexport class UpsertFavorite implements Action {\n  readonly type = FavoriteActionTypes.UpsertFavorite;\n\n  constructor(public payload: { favorite: Favorite }) {}\n}\n\nexport class AddFavorites implements Action {\n  readonly type = FavoriteActionTypes.AddFavorites;\n\n  constructor(public payload: { favorites: Favorite[] }) {}\n}\n\nexport class UpsertFavorites implements Action {\n  readonly type = FavoriteActionTypes.UpsertFavorites;\n\n  constructor(public payload: { favorites: Favorite[] }) {}\n}\n\nexport class UpdateFavorite implements Action {\n  readonly type = FavoriteActionTypes.UpdateFavorite;\n\n  constructor(public payload: { favorite: Update<Favorite> }) {}\n}\n\nexport class UpdateFavorites implements Action {\n  readonly type = FavoriteActionTypes.UpdateFavorites;\n\n  constructor(public payload: { favorites: Update<Favorite>[] }) {}\n}\n\nexport class DeleteFavorite implements Action {\n  readonly type = FavoriteActionTypes.DeleteFavorite;\n\n  constructor(public payload: { id: string }) {}\n}\n\nexport class DeleteFavorites implements Action {\n  readonly type = FavoriteActionTypes.DeleteFavorites;\n\n  constructor(public payload: { ids: string[] }) {}\n}\n\nexport class ClearFavorites implements Action {\n  readonly type = FavoriteActionTypes.ClearFavorites;\n}\n\nexport class SaveFavoritesToLocalStorage implements Action {\n  readonly type = FavoriteActionTypes.SaveFavoritesToLocalStorage;\n}\n\nexport class LoadFavoritesFromLocalStorage implements Action {\n  readonly type = FavoriteActionTypes.LoadFavoritesFromLocalStorage;\n}\n\nexport class AddSelectedCityToFavorites implements Action {\n  readonly type = FavoriteActionTypes.AddSelectedCityToFavorites;\n}\n\nexport class LoadFavoritesPage implements Action {\n  readonly type = FavoriteActionTypes.LoadFavoritesPage;\n}\n\nexport class RemoveSelectedCityFromFavorites implements Action {\n  readonly type = FavoriteActionTypes.RemoveSelectedCityFromFavorites;\n}\n\nexport type FavoriteActions =\n  | LoadFavorites\n  | AddFavorite\n  | UpsertFavorite\n  | AddFavorites\n  | UpsertFavorites\n  | UpdateFavorite\n  | UpdateFavorites\n  | DeleteFavorite\n  | DeleteFavorites\n  | ClearFavorites\n  | SaveFavoritesToLocalStorage\n  | LoadFavoritesFromLocalStorage\n  | AddSelectedCityToFavorites\n  | LoadFavoritesPage\n  | RemoveSelectedCityFromFavorites;\n","import { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { Favorite } from './favorite.model';\nimport { FavoriteActions, FavoriteActionTypes } from './favorite.actions';\n\nexport const favoritesFeatureKey = 'favorites';\n\nexport interface State extends EntityState<Favorite> {\n  // additional entities state properties\n}\n\nexport const adapter: EntityAdapter<Favorite> = createEntityAdapter<Favorite>();\n\nexport const initialState: State = adapter.getInitialState({\n  // additional entity state properties\n});\n\nexport function reducer(state = initialState, action: FavoriteActions): State {\n  switch (action.type) {\n    case FavoriteActionTypes.AddFavorite: {\n      return adapter.addOne(action.payload.favorite, state);\n    }\n\n    case FavoriteActionTypes.UpsertFavorite: {\n      return adapter.upsertOne(action.payload.favorite, state);\n    }\n\n    case FavoriteActionTypes.AddFavorites: {\n      return adapter.addMany(action.payload.favorites, state);\n    }\n\n    case FavoriteActionTypes.UpsertFavorites: {\n      return adapter.upsertMany(action.payload.favorites, state);\n    }\n\n    case FavoriteActionTypes.UpdateFavorite: {\n      return adapter.updateOne(action.payload.favorite, state);\n    }\n\n    case FavoriteActionTypes.UpdateFavorites: {\n      return adapter.updateMany(action.payload.favorites, state);\n    }\n\n    case FavoriteActionTypes.DeleteFavorite: {\n      return adapter.removeOne(action.payload.id, state);\n    }\n\n    case FavoriteActionTypes.DeleteFavorites: {\n      return adapter.removeMany(action.payload.ids, state);\n    }\n\n    case FavoriteActionTypes.LoadFavorites: {\n      return adapter.addMany(action.payload.favorites, state);\n    }\n\n    case FavoriteActionTypes.ClearFavorites: {\n      return adapter.removeAll(state);\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n\nexport const {\n  selectIds,\n  selectEntities,\n  selectAll,\n  selectTotal,\n} = adapter.getSelectors();\n","import {\n  ActionReducerMap,\n  createFeatureSelector,\n  createSelector,\n  MetaReducer,\n} from '@ngrx/store';\nimport * as fromCity from '../reducers/city.reducer';\nimport { environment } from '../../environments/environment';\nimport * as fromWeather from '../reducers/weather.reducer';\nimport * as fromAppSettings from '../reducers/app-settings.reducer';\nimport * as fromFavorite from '../reducers/favorite.reducer';\nimport { Dictionary } from '@ngrx/entity';\nimport { Weather } from './weather.model';\nimport { City } from './city.model';\n\nexport interface State {}\n\nexport const reducers: ActionReducerMap<State> = {\n  cities: fromCity.reducer,\n  weathers: fromWeather.reducer,\n  appSettings: fromAppSettings.reducer,\n  favorites: fromFavorite.reducer,\n};\n\nexport const metaReducers: MetaReducer<State>[] = !environment.production\n  ? []\n  : [];\n\nexport const selectCityState = createFeatureSelector<fromCity.State>('cities');\n\nexport const selectWeatherState = createFeatureSelector<fromWeather.State>(\n  'weathers'\n);\n\nexport const selectAppSettings = createFeatureSelector<fromAppSettings.State>(\n  'appSettings'\n);\n\nexport const selectFavoriteState = createFeatureSelector<fromFavorite.State>(\n  'favorites'\n);\n\nexport const selectFavorites = createSelector(\n  selectFavoriteState,\n  fromFavorite.selectAll\n);\n\nexport const selectFavoriteIds = createSelector(\n  selectFavoriteState,\n  fromFavorite.selectIds\n);\n\nexport const selectCities = createSelector(selectCityState, fromCity.selectAll);\n\nexport const selectCurrentCityId = createSelector(\n  selectCityState,\n  fromCity.getSelectedCityId\n);\n\nexport const selectCityEntities = createSelector(\n  selectCityState,\n  fromCity.selectEntities\n);\n\nexport const queryCities = createSelector(\n  selectCities,\n  cities => (query: string) =>\n    cities.filter(city =>\n      city.name.toLocaleLowerCase().includes(query.toLocaleLowerCase())\n    )\n);\n\nexport const selectWeatherEntities = createSelector(\n  selectWeatherState,\n  fromWeather.selectEntities\n);\n\nexport const getCurrentCity = createSelector(\n  selectCityEntities,\n  selectCurrentCityId,\n  (cityEntities, cityId) => cityEntities[cityId]\n);\n\nexport const selectAllWeathers = createSelector(\n  selectWeatherState,\n  fromWeather.selectAll\n);\n\nexport const getSelectedCityWeather = createSelector(\n  selectAllWeathers,\n  selectCurrentCityId,\n  (weathers, cityId) =>\n    weathers.find(weather => weather.cityId === cityId && !weather.isForecast)\n);\n\nexport const getSelectedCityWeatherForcasts = createSelector(\n  selectAllWeathers,\n  selectCurrentCityId,\n  (weathers, cityId) =>\n    weathers.filter(weather => weather.cityId === cityId && weather.isForecast)\n);\n\nexport const getWeatherByCityId = createSelector(\n  selectAllWeathers,\n  (weathers, props) => weathers.find(weather => weather.cityId === props.cityId)\n);\n\nexport const isSelectedCityInFavorites = createSelector(\n  selectFavoriteIds,\n  selectCurrentCityId,\n  (ids: string[], cityId) => {\n    if (cityId && ids && ids.length > 0) {\n      return ids.includes(cityId);\n    }\n    return false;\n  }\n);\n\nexport const isImpirial = createSelector(\n  selectAppSettings,\n  appSettings => appSettings.degreesUnit === 'IMPIRIAL'\n);\n","import { Action } from '@ngrx/store';\nimport { Update } from '@ngrx/entity';\nimport { Weather } from './weather.model';\n\nexport enum WeatherActionTypes {\n  LoadWeathers = '[Weather] Load Weathers',\n  AddWeather = '[Weather] Add Weather',\n  UpsertWeather = '[Weather] Upsert Weather',\n  AddWeathers = '[Weather] Add Weathers',\n  UpsertWeathers = '[Weather] Upsert Weathers',\n  UpdateWeather = '[Weather] Update Weather',\n  UpdateWeathers = '[Weather] Update Weathers',\n  DeleteWeather = '[Weather] Delete Weather',\n  DeleteWeathers = '[Weather] Delete Weathers',\n  ClearWeathers = '[Weather] Clear Weathers',\n  GetCityCurrentWeather = '[Weather] Get City Current Weather',\n  GetCityWeatherForecast = '[Weather] Get City Weather Forecast',\n}\n\nexport class LoadWeathers implements Action {\n  readonly type = WeatherActionTypes.LoadWeathers;\n\n  constructor(public payload: { weathers: Weather[] }) {}\n}\n\nexport class AddWeather implements Action {\n  readonly type = WeatherActionTypes.AddWeather;\n\n  constructor(public payload: { weather: Weather }) {}\n}\n\nexport class UpsertWeather implements Action {\n  readonly type = WeatherActionTypes.UpsertWeather;\n\n  constructor(public payload: { weather: Weather }) {}\n}\n\nexport class AddWeathers implements Action {\n  readonly type = WeatherActionTypes.AddWeathers;\n\n  constructor(public payload: { weathers: Weather[] }) {}\n}\n\nexport class UpsertWeathers implements Action {\n  readonly type = WeatherActionTypes.UpsertWeathers;\n\n  constructor(public payload: { weathers: Weather[] }) {}\n}\n\nexport class UpdateWeather implements Action {\n  readonly type = WeatherActionTypes.UpdateWeather;\n\n  constructor(public payload: { weather: Update<Weather> }) {}\n}\n\nexport class UpdateWeathers implements Action {\n  readonly type = WeatherActionTypes.UpdateWeathers;\n\n  constructor(public payload: { weathers: Update<Weather>[] }) {}\n}\n\nexport class DeleteWeather implements Action {\n  readonly type = WeatherActionTypes.DeleteWeather;\n\n  constructor(public payload: { id: string }) {}\n}\n\nexport class DeleteWeathers implements Action {\n  readonly type = WeatherActionTypes.DeleteWeathers;\n\n  constructor(public payload: { ids: string[] }) {}\n}\n\nexport class ClearWeathers implements Action {\n  readonly type = WeatherActionTypes.ClearWeathers;\n}\n\nexport class GetCityCurrentWeather implements Action {\n  readonly type = WeatherActionTypes.GetCityCurrentWeather;\n\n  constructor(public payload: { cityId: string }) {}\n}\n\nexport class GetCityWeatherForecast implements Action {\n  readonly type = WeatherActionTypes.GetCityWeatherForecast;\n\n  constructor(public payload: { cityId: string }) {}\n}\n\nexport type WeatherActions =\n  | LoadWeathers\n  | AddWeather\n  | UpsertWeather\n  | AddWeathers\n  | UpsertWeathers\n  | UpdateWeather\n  | UpdateWeathers\n  | DeleteWeather\n  | DeleteWeathers\n  | ClearWeathers\n  | GetCityCurrentWeather\n  | GetCityWeatherForecast;\n","import { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { Weather } from './weather.model';\nimport { WeatherActions, WeatherActionTypes } from './weather.actions';\n\nexport const weathersFeatureKey = 'weathers';\n\nexport interface State extends EntityState<Weather> {\n  // additional entities state properties\n}\n\nexport const adapter: EntityAdapter<Weather> = createEntityAdapter<Weather>();\n\nexport const initialState: State = adapter.getInitialState({\n  // additional entity state properties\n});\n\nexport function reducer(state = initialState, action: WeatherActions): State {\n  switch (action.type) {\n    case WeatherActionTypes.AddWeather: {\n      return adapter.addOne(action.payload.weather, state);\n    }\n\n    case WeatherActionTypes.UpsertWeather: {\n      return adapter.upsertOne(action.payload.weather, state);\n    }\n\n    case WeatherActionTypes.AddWeathers: {\n      return adapter.addMany(action.payload.weathers, state);\n    }\n\n    case WeatherActionTypes.UpsertWeathers: {\n      return adapter.upsertMany(action.payload.weathers, state);\n    }\n\n    case WeatherActionTypes.UpdateWeather: {\n      return adapter.updateOne(action.payload.weather, state);\n    }\n\n    case WeatherActionTypes.UpdateWeathers: {\n      return adapter.updateMany(action.payload.weathers, state);\n    }\n\n    case WeatherActionTypes.DeleteWeather: {\n      return adapter.removeOne(action.payload.id, state);\n    }\n\n    case WeatherActionTypes.DeleteWeathers: {\n      return adapter.removeMany(action.payload.ids, state);\n    }\n\n    case WeatherActionTypes.LoadWeathers: {\n      return adapter.addMany(action.payload.weathers, state);\n    }\n\n    case WeatherActionTypes.ClearWeathers: {\n      return adapter.removeAll(state);\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n\nexport const {\n  selectIds,\n  selectEntities,\n  selectAll,\n  selectTotal,\n} = adapter.getSelectors();\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","var map = {\n\t\"./af\": 8685,\n\t\"./af.js\": 8685,\n\t\"./ar\": 254,\n\t\"./ar-dz\": 4312,\n\t\"./ar-dz.js\": 4312,\n\t\"./ar-kw\": 2614,\n\t\"./ar-kw.js\": 2614,\n\t\"./ar-ly\": 8630,\n\t\"./ar-ly.js\": 8630,\n\t\"./ar-ma\": 8674,\n\t\"./ar-ma.js\": 8674,\n\t\"./ar-sa\": 9032,\n\t\"./ar-sa.js\": 9032,\n\t\"./ar-tn\": 4730,\n\t\"./ar-tn.js\": 4730,\n\t\"./ar.js\": 254,\n\t\"./az\": 3052,\n\t\"./az.js\": 3052,\n\t\"./be\": 150,\n\t\"./be.js\": 150,\n\t\"./bg\": 3069,\n\t\"./bg.js\": 3069,\n\t\"./bm\": 3466,\n\t\"./bm.js\": 3466,\n\t\"./bn\": 8516,\n\t\"./bn.js\": 8516,\n\t\"./bo\": 6273,\n\t\"./bo.js\": 6273,\n\t\"./br\": 9588,\n\t\"./br.js\": 9588,\n\t\"./bs\": 9815,\n\t\"./bs.js\": 9815,\n\t\"./ca\": 3331,\n\t\"./ca.js\": 3331,\n\t\"./cs\": 1320,\n\t\"./cs.js\": 1320,\n\t\"./cv\": 2219,\n\t\"./cv.js\": 2219,\n\t\"./cy\": 8266,\n\t\"./cy.js\": 8266,\n\t\"./da\": 6427,\n\t\"./da.js\": 6427,\n\t\"./de\": 7435,\n\t\"./de-at\": 2871,\n\t\"./de-at.js\": 2871,\n\t\"./de-ch\": 2994,\n\t\"./de-ch.js\": 2994,\n\t\"./de.js\": 7435,\n\t\"./dv\": 2357,\n\t\"./dv.js\": 2357,\n\t\"./el\": 5649,\n\t\"./el.js\": 5649,\n\t\"./en-SG\": 8661,\n\t\"./en-SG.js\": 8661,\n\t\"./en-au\": 9961,\n\t\"./en-au.js\": 9961,\n\t\"./en-ca\": 9878,\n\t\"./en-ca.js\": 9878,\n\t\"./en-gb\": 3924,\n\t\"./en-gb.js\": 3924,\n\t\"./en-ie\": 864,\n\t\"./en-ie.js\": 864,\n\t\"./en-il\": 1579,\n\t\"./en-il.js\": 1579,\n\t\"./en-nz\": 6181,\n\t\"./en-nz.js\": 6181,\n\t\"./eo\": 5291,\n\t\"./eo.js\": 5291,\n\t\"./es\": 4529,\n\t\"./es-do\": 3764,\n\t\"./es-do.js\": 3764,\n\t\"./es-us\": 3425,\n\t\"./es-us.js\": 3425,\n\t\"./es.js\": 4529,\n\t\"./et\": 5203,\n\t\"./et.js\": 5203,\n\t\"./eu\": 678,\n\t\"./eu.js\": 678,\n\t\"./fa\": 3483,\n\t\"./fa.js\": 3483,\n\t\"./fi\": 6262,\n\t\"./fi.js\": 6262,\n\t\"./fo\": 4555,\n\t\"./fo.js\": 4555,\n\t\"./fr\": 3131,\n\t\"./fr-ca\": 8239,\n\t\"./fr-ca.js\": 8239,\n\t\"./fr-ch\": 1702,\n\t\"./fr-ch.js\": 1702,\n\t\"./fr.js\": 3131,\n\t\"./fy\": 267,\n\t\"./fy.js\": 267,\n\t\"./ga\": 3821,\n\t\"./ga.js\": 3821,\n\t\"./gd\": 1753,\n\t\"./gd.js\": 1753,\n\t\"./gl\": 4074,\n\t\"./gl.js\": 4074,\n\t\"./gom-latn\": 5969,\n\t\"./gom-latn.js\": 5969,\n\t\"./gu\": 2809,\n\t\"./gu.js\": 2809,\n\t\"./he\": 5402,\n\t\"./he.js\": 5402,\n\t\"./hi\": 315,\n\t\"./hi.js\": 315,\n\t\"./hr\": 410,\n\t\"./hr.js\": 410,\n\t\"./hu\": 8288,\n\t\"./hu.js\": 8288,\n\t\"./hy-am\": 7928,\n\t\"./hy-am.js\": 7928,\n\t\"./id\": 1334,\n\t\"./id.js\": 1334,\n\t\"./is\": 6959,\n\t\"./is.js\": 6959,\n\t\"./it\": 4864,\n\t\"./it-ch\": 1124,\n\t\"./it-ch.js\": 1124,\n\t\"./it.js\": 4864,\n\t\"./ja\": 6141,\n\t\"./ja.js\": 6141,\n\t\"./jv\": 9187,\n\t\"./jv.js\": 9187,\n\t\"./ka\": 2136,\n\t\"./ka.js\": 2136,\n\t\"./kk\": 4332,\n\t\"./kk.js\": 4332,\n\t\"./km\": 8607,\n\t\"./km.js\": 8607,\n\t\"./kn\": 4305,\n\t\"./kn.js\": 4305,\n\t\"./ko\": 234,\n\t\"./ko.js\": 234,\n\t\"./ku\": 6003,\n\t\"./ku.js\": 6003,\n\t\"./ky\": 5061,\n\t\"./ky.js\": 5061,\n\t\"./lb\": 2786,\n\t\"./lb.js\": 2786,\n\t\"./lo\": 6183,\n\t\"./lo.js\": 6183,\n\t\"./lt\": 29,\n\t\"./lt.js\": 29,\n\t\"./lv\": 4169,\n\t\"./lv.js\": 4169,\n\t\"./me\": 8577,\n\t\"./me.js\": 8577,\n\t\"./mi\": 8177,\n\t\"./mi.js\": 8177,\n\t\"./mk\": 337,\n\t\"./mk.js\": 337,\n\t\"./ml\": 5260,\n\t\"./ml.js\": 5260,\n\t\"./mn\": 2325,\n\t\"./mn.js\": 2325,\n\t\"./mr\": 4695,\n\t\"./mr.js\": 4695,\n\t\"./ms\": 5334,\n\t\"./ms-my\": 7151,\n\t\"./ms-my.js\": 7151,\n\t\"./ms.js\": 5334,\n\t\"./mt\": 3570,\n\t\"./mt.js\": 3570,\n\t\"./my\": 7963,\n\t\"./my.js\": 7963,\n\t\"./nb\": 8028,\n\t\"./nb.js\": 8028,\n\t\"./ne\": 6638,\n\t\"./ne.js\": 6638,\n\t\"./nl\": 302,\n\t\"./nl-be\": 6782,\n\t\"./nl-be.js\": 6782,\n\t\"./nl.js\": 302,\n\t\"./nn\": 3501,\n\t\"./nn.js\": 3501,\n\t\"./pa-in\": 869,\n\t\"./pa-in.js\": 869,\n\t\"./pl\": 5302,\n\t\"./pl.js\": 5302,\n\t\"./pt\": 9687,\n\t\"./pt-br\": 4884,\n\t\"./pt-br.js\": 4884,\n\t\"./pt.js\": 9687,\n\t\"./ro\": 9107,\n\t\"./ro.js\": 9107,\n\t\"./ru\": 3627,\n\t\"./ru.js\": 3627,\n\t\"./sd\": 355,\n\t\"./sd.js\": 355,\n\t\"./se\": 3427,\n\t\"./se.js\": 3427,\n\t\"./si\": 1848,\n\t\"./si.js\": 1848,\n\t\"./sk\": 4590,\n\t\"./sk.js\": 4590,\n\t\"./sl\": 184,\n\t\"./sl.js\": 184,\n\t\"./sq\": 6361,\n\t\"./sq.js\": 6361,\n\t\"./sr\": 8965,\n\t\"./sr-cyrl\": 1287,\n\t\"./sr-cyrl.js\": 1287,\n\t\"./sr.js\": 8965,\n\t\"./ss\": 5456,\n\t\"./ss.js\": 5456,\n\t\"./sv\": 451,\n\t\"./sv.js\": 451,\n\t\"./sw\": 7558,\n\t\"./sw.js\": 7558,\n\t\"./ta\": 1356,\n\t\"./ta.js\": 1356,\n\t\"./te\": 3693,\n\t\"./te.js\": 3693,\n\t\"./tet\": 1243,\n\t\"./tet.js\": 1243,\n\t\"./tg\": 2500,\n\t\"./tg.js\": 2500,\n\t\"./th\": 5768,\n\t\"./th.js\": 5768,\n\t\"./tl-ph\": 5780,\n\t\"./tl-ph.js\": 5780,\n\t\"./tlh\": 9590,\n\t\"./tlh.js\": 9590,\n\t\"./tr\": 3807,\n\t\"./tr.js\": 3807,\n\t\"./tzl\": 3857,\n\t\"./tzl.js\": 3857,\n\t\"./tzm\": 654,\n\t\"./tzm-latn\": 8806,\n\t\"./tzm-latn.js\": 8806,\n\t\"./tzm.js\": 654,\n\t\"./ug-cn\": 845,\n\t\"./ug-cn.js\": 845,\n\t\"./uk\": 9232,\n\t\"./uk.js\": 9232,\n\t\"./ur\": 7052,\n\t\"./ur.js\": 7052,\n\t\"./uz\": 7967,\n\t\"./uz-latn\": 2233,\n\t\"./uz-latn.js\": 2233,\n\t\"./uz.js\": 7967,\n\t\"./vi\": 8615,\n\t\"./vi.js\": 8615,\n\t\"./x-pseudo\": 2320,\n\t\"./x-pseudo.js\": 2320,\n\t\"./yo\": 1313,\n\t\"./yo.js\": 1313,\n\t\"./zh-cn\": 4490,\n\t\"./zh-cn.js\": 4490,\n\t\"./zh-hk\": 5910,\n\t\"./zh-hk.js\": 5910,\n\t\"./zh-tw\": 4223,\n\t\"./zh-tw.js\": 4223\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 6700;"],"names":["isSelectedCityInFavorites","isImpirial","AddSelectedCityToFavorites","RemoveSelectedCityFromFavorites","select","getCurrentCity","getSelectedCityWeather","getSelectedCityWeatherForcasts","distinctUntilChanged","i0","CitiesPageComponent","constructor","cityStore","weatherStore","appSettingsStore","ngOnInit","isImpirial$","pipe","selectedCity$","isSelectedCityInFavorites$","currentWeather$","weatherForecasts$","onAddToFavoritesClicked","dispatch","onRemoveFromFavoritesClicked","selectors","decls","vars","consts","template","SearchCities","SelectCity","ClearSelectedCity","ElementRef","fromEvent","of","debounceTime","map","UntypedFormControl","selectCities","queryCities","SubSink","CityselectorComponent","cities$","subs","add","subscribe","city","cityInput","setValue","name","ngAfterViewInit","autoCompleteInput","nativeElement","event","value","selector","cities","length","query","onOptionSelected","option","id","cityId","trackByCity","index","ngOnDestroy","unsubscribe","viewQuery","ctx","AddCity","selectFavorites","getWeatherByCityId","LoadFavoritesPage","FavoritesPageComponent","favoriteStore","router","favorites$","onWeatherCardClicked","favorite","cityName","navigateByUrl","SetDegreesUnit","selectAppSettings","UnitsSelectorComponent","appSettings$","onSelectionChanged","changeEvent","unit"],"sourceRoot":"webpack:///","x_google_ignoreList":[31]}